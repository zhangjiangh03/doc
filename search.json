[{"title":"【C】数据类型、变量和常量","url":"/doc/2023/05/28/C/%E3%80%90C%E3%80%91%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E3%80%81%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F/","content":" 【目录】C语言\nC 语言数据类型C 语言的数据类型有基本数据类型和复杂数据类型两种。\n基本数据类型基本数据类型是计算机编程语言中预定义的简单数据类型。C 语言的基本数据类型包括整型、浮点型、字符型和布尔型等。\n整型整型是指没有小数部分的数字。整型可以有不同的长度和符号。\n\n\n\n类型\n存储大小\n取值范围\n\n\n\nint\n2 或 4 字节\n-32,768 到 32,767 或 -2,147,483,648 到 2,147,483,647\n\n\nunsigned int\n2 或 4 字节\n0 到 65,535 或 0 到 4,294,967,295\n\n\nshort\n2 字节\n-32,768 到 32,767\n\n\nunsigned short\n2 字节\n0 到 65,535\n\n\nlong\n4 字节\n-2,147,483,648 到 2,147,483,647\n\n\nunsigned long\n4 字节\n0 到 4,294,967,295\n\n\n浮点型浮点型是指带有小数部分的数字。浮点型同样可以有不同的长度和精度。\n\n\n\n类型\n存储大小\n取值范围\n精度\n\n\n\nfloat\n4 字节\n1.2E-38 到 3.4E+38\n6 位小数\n\n\ndouble\n8 字节\n2.3E-308 到 1.7E+308\t15 位小数\n\n\n\nlong double\n10 或 12 或 16 字节\n3.4E-4932 到 1.1E+4932\t19 位小数\n\n\n\n字符型字符型数据类型用于存储单个字符。单引号括起来的字符就是字符型字面量。\n\n\n\n类型\n存储大小\n取值范围\n\n\n\nchar\n1 字节\n-128 到 127 或 0 到 255\n\n\nsigned char\n1 字节\n-128 到 127\n\n\nunsigned char\n1 字节\n0 到 255\n\n\n布尔型布尔型数据类型用于存储逻辑值 true 或 false 。用来表示真、假两个值，其大小为一个字节。一般情况下，true 的值为 1，false 的值为 0 。C语言中布尔型数据类型使用关键字 _Bool 或 bool 定义。\n#include &lt;stdio.h&gt;#include &lt;stdbool.h&gt;int main()&#123;    bool flag = true;    printf(&quot;flag = %d\\n&quot;，flag);        flag = false;    printf(&quot;flag = %d\\n&quot;，flag);        return 0;&#125;\n\n输出结果为：\nflag = 1flag = 0\n\nC 语言还允许使用 typedef 来自定义数据类型，例如 typedef int myInt 就将 myInt 定义为 int 类型的别名。\n复杂数据类型C 语言的复杂数据类型包括数组、结构体、共用体和枚举等几种，这里只是简单提到，后面会有较详细的笔记。\n\n数组：一组相同类型的变量，在内存中依次排列，使用下标访问数组中的单个元素。\n结构体：一组不同类型的变量，可以自定义组合在一起，每个变量都有自己的名称和数据类型，可以通过结构体变量名和点号来访问其中的某个变量。\n共用体：特殊的结构体，所有的成员变量共享一个地址空间。\n枚举：一种可以定义自己的符号常量的类型。枚举类型中的每个符号常量都有一个对应的整数值。\n\n类型转换int 转 short在C语言中，int 和 short 都是整型数据类型，但它们的长度不同。\n\nint 通常占用4个字节（32位），而 short 通常占用2个字节（16位）。\n\n如果原来的 int 变量的值超过了 short 类型的取值范围，那么在进行类型转换时，这些超出范围的高位将被丢弃，只保留低位的数值。可能导致程序出现错误或数据的精度降低。同时，由于 short 类型的范围较小，可能会导致一些算术运算的结果溢出或不正确。\n#include &lt;stdio.h&gt;int main() &#123;    int x = 65535; //设置一个值为65535的int类型变量x    short y = x; //将x从int类型转换为short类型并赋值给y    printf(&quot;x : %d\\n&quot;，x); //打印x的值    printf(&quot;y : %d\\n&quot;，y); //打印y的值    return 0;&#125;\n\n输出结果：\nx : 65535y : -1\n\nshort 类型只有16位的情况下，数值范围最大只能到 32767 。x 的值超过了 short 类型的取值范围，因此在进行类型转换时，高位被丢弃并截断，保留了低位，导致y的值变成了 -1 。\n变量变量是一种内存管理机制，用于存储和操作程序中的数据。它们可以拥有各种不同的数据类型，包括整数、浮点数、字符和布尔值等。在C语言中，变量的声明必须以数据类型开始，并使用一个唯一的标识符来引用它们。关于C语言的标识符，是指程序中用来命名变量、函数、宏等程序实体的名称，规则如下：\n\n标识符由字母、数字和下划线组成，不能以数字开头。\n标识符的长度没有限制，但只有前31个字符才会被编译器识别，超过部分将被忽略。\nC语言是区分大小写的，因此相同的单词，但大小写不同，被视为不同的标识符。\n关键字不能用作标识符，例如 if 、 while 、 int 等。\n标识符不能包含空格、运算符或其他特殊字符，只能由ASCII码中的可打印字符组成。\n\n一个简单变量的定义规则如下：\n变量数据类型 变量名称;\n\n这告诉编译器给变量 x 分配一些内存，以便将其值存储在其中。例如：\nint num;\n\n变量可以被初始化，也可以被赋值。\n初始化：\n变量数据类型 变量名称 = 数值;\n\n赋值：\n变量数据类型 变量名称;变量名称 = 数值; \n\n下面的代码是将变量 x 初始化为10：\nint x = 10;\n\n将其他值赋给变量 x ：\nx = 20;\n\n此时x的值从 10 变为 20 。\nC 语言中的变量还有作用域的概念。作用域是指变量在程序中可见的范围。在函数内部定义的变量只在该函数内部可见，称为局部变量。在函数外部定义的变量在整个程序中都可见，称为全局变量。\n常量常量是一种固定的值，在计算机程序中使用。它们不像变量那样可以更改，而是始终保持相同的数值。在C语言中，有两种类型的常量：字面量和符号常量。\n字面量字面量指的是在代码中硬编码的数字、字符串或其他数据类型，也就是在程序中直接使用的常量值，它们在程序运行时被固定下来，不会发生任何变化。字面量可以是整型、浮点数、字符或字符串等类型。\n\n整型字面量：10、100、0xFF、-23等。\n浮点数字面量：3.14、1.0e-5等。\n字符字面量：’A’、’7’、’\\n’等。\n字符串字面量：”hello, world”、”C语言编程”等。\n\nint x = 10;      // 整数常量float pi = 3.14; // 浮点数常量\n\n上面的代码中 10 和 3.14 都是字面量，因为它们是在程序中直接使用的常量值。\n符号常量符号常量是另一种常量，是通过定义来创建的。符号常量由预处理器指令 #define 创建，习惯上通常用大写字母命名。\n#define MAX 100\n\n上面的代码中 MAX 表示一个值为 100 的整数常量。可使用 MAX 代替数字 100 ，在程序执行过程中 MAX 会被替换成 100 。\n#include &lt;stdio.h&gt;#define MAX 100const int MAX_NUM = 100;int main()&#123;\tprintf(&quot;%d&quot;, MAX); //相当于 printf(&quot;%d&quot;, 100); \treturn 0;&#125;\n\nconst 关键字用于定义常量，表示该变量的值不能被修改。它可以用来修饰普通变量、函数参数和函数返回值等。\n","categories":["C"],"tags":["C"]},{"title":"【目录】C语言","url":"/doc/2023/05/28/C/%E3%80%90%E7%9B%AE%E5%BD%95%E3%80%91C%E8%AF%AD%E8%A8%80/","content":"基础语法\n【C】数据类型、变量和常量\n运算符和表达式\n控制结构（if语句、switch语句、for循环、while循环等）\n数组和指针\n\n函数\n函数定义和调用\n形参和实参\n函数返回值\n递归函数\n\n文件操作\n文件读写\n文件指针\n\n动态内存分配与管理\nmalloc()和free()函数\n\n结构体和联合体\n结构体的定义和使用\n结构体数组\n联合体的定义和使用\n\n高级语言特性\n自定义类型和枚举\n头文件和预处理器指令\n宏定义\ntypedef关键字\n\n模块化编程\n多文件编程技巧\n头文件和源文件之间的关系\nMakefile的使用\n\n面向对象编程基础\n封装、继承、多态概念\nC语言中模拟面向对象编程\n\n高级主题\n指针的高级应用\n多线程和进程\n网络编程\n\n","categories":["C"],"tags":["C"]},{"title":"【目录】Python","url":"/doc/2023/05/27/Python/%E3%80%90%E7%9B%AE%E5%BD%95%E3%80%91Python/","content":"Python环境搭建\n安装Python解释器\n配置开发环境\n\n基本语法\n数据类型\n变量和常量\n运算符和表达式\n控制流程语句\n函数和模块\n\n组合数据类型\n列表、元组和字典\n集合和字符串\n\n文件操作\n文件读写\n目录操作\n\n错误处理与调试\n异常处理\n调试技巧\n\n面向对象编程\n类和对象\n继承和多态\n面向对象设计思想\n\nGUI编程\nTkinter库介绍\n创建GUI窗口\n添加控件和事件处理\n\n网络编程\nSocket编程基础\nHTTP协议和Web框架\n\n数据科学和机器学习\nNumpy和Pandas库介绍\nScikit-Learn库介绍\n数据可视化\n\n","categories":["Python"],"tags":["Python"]}]